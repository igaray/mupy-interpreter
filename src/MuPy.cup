package MuPy;

import java.io.*;
import java.lang.Exception;
import java.lang.String;
import java_cup.runtime.*;
import MuPy.SymbolTable;
import MuPy.OurSymbol;

action code
{:
    private static boolean debug = false;

    private SymbolTable st = new SymbolTable();
:}

parser code
{:

    public static void main(String args[])
    {
        try {
            new parser(new Yylex(System.in)).parse();
        } catch (Exception e)   {
            System.err.println(e.getMessage());
            System.exit(1);
        }
    }

    public void syntax_error(java_cup.runtime.Symbol sym) {
        System.out.println("Error parsing at line " + (sym.left + 1));
        System.exit(1);
    }
:}

terminal PRINT;
terminal PERIOD;
terminal ENTER;
terminal STR;
terminal BRACE_OPEN;
terminal BRACE_CLOSE;
terminal PAREN_OPEN;
terminal PAREN_CLOSE;
terminal COLON;
terminal ADD;
terminal SUB;
terminal MUL;
terminal DIV;
terminal ASS;
terminal ASS_ADD;
terminal ASS_MUL;
terminal String  STRING;
terminal String  IDENTIFIER;
terminal Integer INTEGER;

non terminal program;
non terminal statement_list;
non terminal statement;
non terminal print;
non terminal assignment;
non terminal String expression;
non terminal String postfix_expression;
non terminal RangeValue slice;
non terminal String slice_expression;

precedence left ADD, SUB;
precedence left MUL, DIV;

start with program;

program
    ::= statement_list:stmntlst 
        PERIOD 
        ENTER
    ;

statement_list
    ::= statement:stmnt 
        ENTER 
        {: 
            if (debug) { st.print(); }
            st.clearAnonVars();     
        :}
        statement_list:stmntlst
    |   
    ;

statement
    ::= print:p
    |   assignment:asgnmt
    ;

print   
    ::= PRINT expression:expr
        {: 
            System.out.println(st.get(expr).getValue().toString());
        :}
    ;

assignment
    ::= IDENTIFIER:id ASS expression:expr
        {: 
            Value val = st.get(expr).getValue();

            if (st.isDeclared(id)) {
                st.setValue(id, val);
            }
            else {
                st.addVar(id, val);
            }
        :}
    |   IDENTIFIER:id ASS_ADD expression:expr
        {:
            if (! st.isDeclared(id)) {
                throw new Exception("Error: variable "+id+" is not declared.");
            }

            Value val1 = st.get(id).getValue();
            Value val2 = st.get(expr).getValue();

            if (!val1.isInt()) {
                throw new Exception("Error: variable "+id+" does not hold an integer value.");
            }
            if (!val2.isInt()) {
                throw new Exception("Error: assignment expression does not evaluate to an integer value.");
            }
            st.setValue(id, new Value(val1.getIntValue() + val2.getIntValue()));
        :}
    |   IDENTIFIER:id ASS_MUL expression:expr
        {:
            if (! st.isDeclared(id)) {
                throw new Exception("Error: variable "+id+" is not declared.");
            }

            Value val1 = st.get(id).getValue();
            Value val2 = st.get(expr).getValue();

            if (!val1.isInt()) {
                throw new Exception("Error: variable "+id+" does not hold an integer value.");
            }
            if (!val2.isInt()) {
                throw new Exception("Error: assignment expression does not evaluate to an integer value.");
            }
            st.setValue(id, new Value(val1.getIntValue() * val2.getIntValue()));        
        :}
        ;

expression
    ::= expression:expr1 ADD expression:expr2
        {: 
            Value val1 = st.get(expr1).getValue();
            Value val2 = st.get(expr2).getValue();

            if (val1.getType() != val2.getType()) {
                throw new Exception("Error: cannot add a string to an integer.");
            }
            if (val1.isInt()) {
                RESULT = st.addAnonVar(new Value(val1.getIntValue() + val2.getIntValue()));
            } else if (val1.isString()) {
                RESULT = st.addAnonVar(new Value(val1.getStringValue() + val2.getStringValue()));
            }

        :}
    |   expression:expr1 SUB expression:expr2
        {:
            Value val1 = st.get(expr1).getValue();
            Value val2 = st.get(expr2).getValue();

            if (val1.isInt() && val2.isInt()) {
                RESULT = st.addAnonVar(new Value(val1.getIntValue() - val2.getIntValue()));
            }
            else {
                throw new Exception("Type error: one of the operands is not an integer.");
            }
        :}
    |   expression:expr1 MUL expression:expr2
        {: 
            Value val1 = st.get(expr1).getValue();
            Value val2 = st.get(expr2).getValue();

            if (val1.isInt() && val2.isInt()) {
                RESULT = st.addAnonVar(new Value(val1.getIntValue() * val2.getIntValue()));
            } else if (val1.isString() && val2.isInt()) {
                String  result = val1.getStringValue();
                int          m = val2.getIntValue().intValue();

                for (int i = 0; i < m; i++) {
                    result.concat(val1.getStringValue());
                }
                RESULT = st.addAnonVar(new Value(result));
            } else if (val1.isInt() && val2.isString()) {
                String  result = val2.getStringValue();
                int          m = val1.getIntValue().intValue();

                for (int i = 0; i < m; i++) {
                    result.concat(val2.getStringValue());
                }
                RESULT = st.addAnonVar(new Value(result));
            } else {
                throw new Exception("Type error: at least one operand must be an integer.");
            }
        :}
    |   expression:expr1 DIV expression:expr2
        {: 
            Value val1 = st.get(expr1).getValue();
            Value val2 = st.get(expr2).getValue();

            if (val1.isInt() && val2.isInt()) {
                RESULT = st.addAnonVar(new Value(val1.getIntValue() / val2.getIntValue()));
            }
            else {
                throw new Exception("Type error: operands are not integers.");
            }
        :}
    |   ADD expression:expr
        {: 
            /* This doesn't really do anything.
             * If the value of the expression is an integer, then
             * a unary plus will not change its sign or value.
             * If the value is a string, there is nothing to concatenate
             * with, although strictly it should emit an error. 
             */
            RESULT = expr;
        :}
    |   SUB expression:expr
        {: 
            Value val = st.get(expr).getValue();
            if (! val.isInt())
                throw new Exception("Type error: trying to change sign of a non-integer value.");
            RESULT = st.addAnonVar(new Value( - val.getIntValue()) );
        :}
    |   PAREN_OPEN expression:expr PAREN_CLOSE
        {: 
            RESULT = expr; 
        :}
    |   postfix_expression:pfexpr
        {: 
            RESULT = pfexpr;
        :}
    ;

postfix_expression
    ::= IDENTIFIER:id
        slice:slc
        {: 
            if (! st.isDeclared(id))
                throw new Exception("Unknown variable: " + id);
            if (slc == null) {
                RESULT = id;
            }
            else {
                Value val = st.get(id).getValue();

                if (! val.isString()) {
                    throw new Exception("Slices can only be applied to string values.");
                }
                if (slc.index2 >= val.getStringValue().length()) {
                    throw new Exception("Slice index "+slc.index2+" out of range in string \""+id+"\"");
                }
                RESULT = st.addAnonVar(new Value(val.getStringValue().substring(slc.index1, slc.index2)));
            }
        :}
    |   INTEGER:intgr
        {: 
            RESULT = st.addAnonVar(new Value(intgr));
        :}
    |   STRING:strng
        slice:slc
        {: 
            if (slc == null) {
                RESULT = st.addAnonVar(new Value(strng));
            }
            else {
                RESULT = strng;
            }
        :}
    |   STR
        expression:expr
        {: 
            RESULT = st.addAnonVar(new Value(st.get(expr).getValue().toString()));
        :}
    ;

slice
    ::= BRACE_OPEN expression:fexpr slice_expression:sexpr BRACE_CLOSE
        {: 
            if (sexpr == null) {
                Value     val1 = st.get(fexpr).getValue();
                Integer   int1 = val1.getIntValue();
                if (! val1.isInt()) {
                    throw new Exception("Type error: slice expression must evaluate to integer.");
                }
                RESULT = new RangeValue(int1, int1);
            }
            else {
                Value   val1 = st.get(fexpr).getValue();
                Value   val2 = st.get(sexpr).getValue();
                Integer int1 = val1.getIntValue();
                Integer int2 = val2.getIntValue();
                
                if (! (val1.isInt() && val2.isInt())) {
                    throw new Exception("Type error: both slice expressions must evaluate to integers.");
                }
                if (! (int1 >= 0 && int2 >= 0)) {
                    throw new Exception("Error: slice expressions must evaluate to non negative integers.");
                }
                if (int1 > int2) {
                    throw new Exception("Error: the first slice expression must evaluate to a non negative integer value smaller than the second slice expression's value.");
                }
                RESULT = new RangeValue(int1, int2);                
            }
        :}
    |
    ;

slice_expression
    ::= COLON expression:expr
        {:
            RESULT = expr;
        :}
    |
    ;
