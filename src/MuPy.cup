package MuPy;

import java.io.*;
import java.lang.Exception;
import java.lang.String;
import java_cup.runtime.*;
import MuPy.SymbolTable;
import MuPy.OurSymbol;

action code
{:
    public static boolean debug = false;

    public SymbolTable table = new SymbolTable();
:}

parser code
{:

    public static void main(String args[])
    {
        try {
            new parser(new Yylex(System.in)).parse();
        } catch (Exception e)   {
            System.err.println(e.getMessage());
            System.exit(1);
        }
    }

    public void syntax_error(java_cup.runtime.Symbol sym) {
        System.out.println("Error parsing at line " + (sym.left + 1));
        System.exit(1);
    }
:}

terminal PRINT;
terminal PERIOD;
terminal ENTER;
terminal STR;
terminal BRACE_OPEN;
terminal BRACE_CLOSE;
terminal PAREN_OPEN;
terminal PAREN_CLOSE;
terminal COLON;
terminal ADD;
terminal SUB;
terminal MUL;
terminal DIV;
terminal ASS;
terminal ASS_ADD;
terminal ASS_MUL;
terminal String  STRING;
terminal String  IDENTIFIER;
terminal Integer INTEGER;

non terminal program;
non terminal statement_list;
non terminal statement;
non terminal print;
non terminal assignment;
non terminal String expression;
non terminal String postfix_expression;
non terminal String slice;
non terminal String slice_expression;

precedence left ADD, SUB;
precedence left MUL, DIV;

start with program;

program
    ::= statement_list:stmntlst PERIOD ENTER
    ;

statement_list
    ::= statement:stmnt ENTER statement_list:stmntlst
    |   
    ;

statement
    ::= print:p
        {: 
            if (debug) System.out.println("S:01"); 
        :}
    |   assignment:asgnmt
        {: 
            if (debug) System.out.println("S:02"); 
        :}
    ;

print   
    ::= PRINT expression:expr
        {: 
            if (debug) System.out.println("S:03");
            OurSymbol exprsym = table.get(expr);
            System.out.println(exprsym);
        :}
    ;

assignment
    ::= IDENTIFIER:id ASS expression:expr
        {: 
            if (debug) System.out.println("S:04");
            /*
            OurSymbol exprsym = table.get(expr);
            int res = table.addVar(exprsym.getType(), id, exprsym.getValue());
            switch (res) {
                case 1: { 
                    table.setValue(id, exprsym.getValue());
                    break;
                    }
                case 2: {
                    String type1 = exprsym.getType();
                    String type2 = table.get(id).getType();
                    String errormessage = String.format("Incompatible types, cannot assign %s to %s", type1, type2);
                    throw new Exception(errormessage);
                    break;
                }
            }
            */
        :}
    |   IDENTIFIER:id ASS_ADD expression:expr
        {: 
            if (debug) System.out.println("S:05"); 
        :}
    |   IDENTIFIER:id ASS_MUL expression:expr
        {: 
            if (debug) System.out.println("S:06"); 
        :}
        ;

expression
    ::= expression:expr1 ADD expression:expr2
        {: 
            if (debug) System.out.println("S:07"); 
        :}
    |   expression:expr1 SUB expression:expr2
        {: 
            if (debug) System.out.println("S:08"); 
        :}
    |   expression:expr1 MUL expression:expr2
        {: 
            if (debug) System.out.println("S:09"); 
        :}
    |   expression:expr1 DIV expression:expr2
        {: 
            if (debug) System.out.println("S:10"); 
        :}
    |   ADD expression:expr
        {: 
            if (debug) System.out.println("S:11"); 
        :}
    |   SUB expression:expr
        {: 
            if (debug) System.out.println("S:12"); 
        :}
    |   PAREN_OPEN expression:expr PAREN_CLOSE
        {: 
            if (debug) System.out.println("S:13"); 
        :}
    |   postfix_expression:pfexpr
        {: 
            if (debug) System.out.println("S:14"); 
        :}
    ;

postfix_expression
    ::= IDENTIFIER:id
        slice:slc
        {: 
            if (debug) System.out.println("S:15"); 
            if (! table.isDeclared(id))
                throw new Exception("Undeclared variable: " + id);
            RESULT = id;
        :}
    |   INTEGER:intgr
        {: 
            if (debug) System.out.println("S:16");
            RESULT = table.addAnonymVar("int", intgr);
        :}
    |   STRING:strng
        {: 
            if (debug) System.out.println("S:17"); 
            RESULT = table.addAnonymVar("string", strng);
        :}
    |   STR
        expression:expr
        {: 
            if (debug) System.out.println("S:18");
            OurSymbol exprsym = table.get(expr);
            RESULT = new java.lang.String(exprsym.getIValue());
        :}
    ;

slice
    ::= BRACE_OPEN expression:expr slice_expression:sexpr BRACE_CLOSE
        {: 
            if (debug) System.out.println("S:19");
        :}
    |
    ;

slice_expression
    ::= COLON expression:expr
        {:
            if (debug) System.out.println("S:20"); 
        :}
    |
    ;
